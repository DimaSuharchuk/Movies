<?php
/**
 * @file
 * Films Parser main file.
 */

define('FILMS_PARSER_MODULE_PATH', drupal_get_path('module', 'films_parser'));

require_once FILMS_PARSER_MODULE_PATH . '/includes/fetch_films.batch.inc';
require_once FILMS_PARSER_MODULE_PATH . '/includes/translations.batch.inc';
require_once FILMS_PARSER_MODULE_PATH . '/includes/get_prepared_string.inc';
require_once FILMS_PARSER_MODULE_PATH . '/includes/translate_persons.batch.inc';

/**
 * Defines OMDB placeholder for unknown records.
 */
define('OMDB_NONAME_PLACEHOLDER', 'N/A');

/**
 * Implements hook_menu().
 */
function films_parser_menu() {
  $items = [];

  $items['admin/settings/films-parser'] = [
    'title' => 'Site configurations',
    'description' => 'Manage site configurations for film parser, etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['films_parser_admin_settings'],
    'access arguments' => ['access parser configs'],
  ];
  $items['admin/settings/fetch-films'] = [
    'title' => 'Fetch films',
    'description' => 'Fetch json from imdb and create films nodes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['films_parser_form'],
    'access arguments' => ['fetch films page'],
    'weight' => 5,
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function films_parser_permission() {
  return [
    'access parser configs' => [
      'title' => t('Access to films parser configs page.'),
    ],
    'fetch films page' => [
      'title' => t('Fetch films page'),
      'description' => t('Access to fetch films batch.'),
    ],
    'fetch films' => [
      'title' => t('Fetch films'),
      'description' => t('Access to add eng films.'),
    ],
    'add translations' => [
      'title' => t('Add translations'),
      'description' => t('Access to add translations for films.'),
    ],
  ];
}

/**
 * Module's settings form.
 */
function films_parser_admin_settings() {
  $form = [];

  $form['omdb_api_key'] = [
    '#type' => 'textfield',
    '#title' => t('OMDB API key'),
    '#default_value' => variable_get('omdb_api_key'),
    '#required' => TRUE,
  ];

  return system_settings_form($form);
}

/**
 * Implements hook_form().
 *
 * Film parser batch form.
 */
function films_parser_form($form, &$form_state) {
  $form['fetch_films'] = [
    '#type' => 'fieldset',
    '#title' => t('Fetch new films'),
    '#access' => user_access('fetch films'),
  ];
  $form['fetch_films']['imdb_ids'] = [
    '#type' => 'textarea',
    '#description' => t('Paste list of IMDB ID\'s in any format.'),
  ];
  $form['fetch_films']['start'] = [
    '#type' => 'submit',
    '#value' => t('Go'),
    '#submit' => ['films_parser_fetch_films_from_omdb'],
    '#name' => 'fetch_films',
  ];

  $form['get_name_year'] = [
    '#type' => 'fieldset',
    '#title' => t('Get string for search in internet'),
    '#access' => user_access('add translations'),
  ];
  $form['get_name_year']['field'] = [
    '#type' => 'container',
    '#attributes' => [
      'id' => 'prepared-string',
    ],
  ];
  $form['get_name_year']['imdb_id'] = [
    '#type' => 'textfield',
    '#title' => t('IMDB ID'),
    '#description' => t('Paste IMDB ID to prepare string for search in internet.'),
    '#attributes' => [
      'autocomplete' => 'off',
    ],
  ];
  $form['get_name_year']['button'] = [
    '#type' => 'button',
    '#value' => t('Go'),
    '#name' => 'prepare_string',
    '#ajax' => [
      'wrapper' => 'prepared-string',
      'callback' => 'films_parser_get_prepared_string_ajax_callback',
      'progress' => '',
    ],
    '#states' => [
      'disabled' => [
        'input[name=imdb_id]' => ['filled' => FALSE],
      ],
    ],
  ];

  $form['add_translations'] = [
    '#type' => 'fieldset',
    '#title' => t('Add translations'),
    '#access' => user_access('add translations'),
  ];
  $form['add_translations']['csv'] = [
    '#type' => "managed_file",
    '#title' => 'CSV file',
    '#description' => t('Load file with translations for films. Fields: IMDB ID, Title, Description.'),
    "#upload_validators" => [
      'file_validate_extensions' => ['csv'],
    ],
    '#progress_indicator' => 'bar',
    '#upload_location' => "public://",
  ];
  $form['add_translations']['tr_settings'] = [
    '#type' => 'radios',
    '#options' => [
      'add_update' => t('Add new translations and update old.'),
      'add_new' => t('Only add new translations (old translations will not be affected).'),
    ],
    '#default_value' => 'add_new',
  ];
  $form['add_translations']['start'] = [
    '#type' => 'submit',
    '#value' => t('Go'),
    '#submit' => ['films_parser_add_translated_films'],
    '#validate' => ['films_parser_add_translated_films_validate'],
    '#name' => 'translate_films',
  ];

  $directors = _get_taxonomy_terms_translations_by_vocabulary_name('Directors');
  $actors = _get_taxonomy_terms_translations_by_vocabulary_name('Actors');
  $form['persons'] = [
    '#type' => 'value',
    '#value' => $directors['non_translated'] + $actors['non_translated'],
  ];
  $form['translate_persons'] = [
    '#type' => 'fieldset',
    '#title' => t('Translate persons'),
  ];
  $form['translate_persons']['info_en'] = [
    '#type' => 'item',
    '#markup' => t('Translated &d and &a.', [
      '&d' => format_plural($directors['translated_count'], '1 director', '@count directors'),
      '&a' => format_plural($actors['translated_count'], '1 actor', '@count actors'),
    ]),
  ];
  $form['translate_persons']['info_ru'] = [
    '#type' => 'item',
    '#markup' => t('Non-translated &d and &a.', [
      '&d' => format_plural(count($directors['non_translated']), '1 director', '@count directors'),
      '&a' => format_plural(count($actors['non_translated']), '1 actor', '@count actors'),
    ]),
  ];
  $form['translate_persons']['translate_button'] = [
    '#type' => 'submit',
    '#value' => t('Translate'),
    '#submit' => ['films_parser_translate_persons'],
    '#name' => 'translate_persons',
  ];

  if (!variable_get('omdb_api_key')) {
    form_set_error('',
      t(
        'OMDB API key not defined. <a href="@link" target="_blank">Set</a> key.', [
        '@link' => url('admin/settings/films-parser'),
      ])
    );

    $form['fetch_films']['start']['#disabled'] = TRUE;
    $form['fetch_films']['imdb_ids']['#disabled'] = TRUE;
  }

  return $form;
}

/**
 * Helper function fetch JSON from omdbapi.com.
 *
 * @param $id
 *  IMDB film ID.
 *
 * @return mixed
 *  Decoded JSON with film parameters.
 */
function _fetch_json_from_omdb($id) {
  $url = 'http://www.omdbapi.com/?i=' . $id . '&plot=full&apikey=' . variable_get('omdb_api_key');

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  // Will return the response, if false it print the response
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_URL, $url);
  $output = curl_exec($ch);
  curl_close($ch);

  return json_decode($output, TRUE);
}

/**
 * Helper function creates film node and fill all parameters.
 *
 * @param $json
 *  Decoded JSON from IMDB api.
 *
 * @throws \Exception
 */
function _create_film($json) {
  if (!empty($json)) {
    if (isset($json['Error'])) {
      form_set_error('error', $json['Error']);
      return;
    }

    $node = new stdClass();
    $node->type = 'film';
    $node->language = 'en';
    node_object_prepare($node);
    node_submit($node);
    node_save($node);

    $wrapper = entity_metadata_wrapper('node', $node);

    /**
     * Set properties.
     *
     * @properties:
     *  text Title
     *  text IMDB ID
     *  image Poster
     *  int Year
     *  array Genre (taxonomy reference "genre")
     *  float IMDB voting
     *  int Runtime
     *  array Country
     *  text Director (taxonomy reference "person")
     *  array Actors (taxonomy reference "person")
     *  long text Description
     */
    // Set title.
    $wrapper->title = $json['Title'];

    // Set IMDB ID.
    $wrapper->field_imdb_id = $json['imdbID'];

    //Set release year.
    $wrapper->field_year = (int) $json['Year'];

    // Set genres with creating if not exists.
    $genres = _get_array_from_string($json['Genre']);
    $genres_ids = [];
    foreach ($genres as $genre) {
      $genres_ids[] = _get_tid_from_term_name('genres', $genre);
    }
    $wrapper->field_genre = $genres_ids;

    // Set countries. Use countries api.
    $countries = _get_array_from_string($json['Country']);
    $countries_codes = [];
    foreach ($countries as $country) {
      if (countries_country_lookup($country, 'iso3')) {
        $countries_codes[] = countries_country_lookup($country)->iso2;
      }
      // IMDB use "UK" code for United Kingdom, we simplify it for countries api
      // and use "GB" means Great Britain.
      if ($country == 'UK') {
        $countries_codes[] = 'GB';
      }
    }
    $wrapper->field_country = $countries_codes;

    // Set film director.
    $directors = _get_array_from_string($json['Director']);
    $director_ids = [];
    foreach ($directors as $director) {
      $director_ids[] = _get_tid_from_term_name('directors', $director);
    }
    $wrapper->field_director = $director_ids;

    // Set actors.
    $actors = _get_array_from_string($json['Actors']);
    $actors_ids = [];
    foreach ($actors as $actor) {
      $actors_ids[] = _get_tid_from_term_name('actors', $actor);
    }
    $wrapper->field_actors = $actors_ids;

    // Set IMDB rating.
    $wrapper->field_imdb = (float) $json['imdbRating'];

    // Set description.
    $wrapper->field_description = $json['Plot'];

    // Set runtime.
    $wrapper->field_runtime = (int) $json['Runtime'];

    // Save poster.
    if ($json['Poster'] != OMDB_NONAME_PLACEHOLDER) {
      $file = file_save_data(file_get_contents($json['Poster']), file_default_scheme() . "://posters/" . basename($json['Poster']));
      $wrapper->field_poster_image->set((array) $file);
    }

    // Save filled node.
    $wrapper->save();
  }
}

/**
 * Helper function get taxonomy term ID.
 *
 * @param $vocabulary
 *  Taxonomy vocabulary name.
 * @param $term_name
 *  Searched term name.
 *
 * @return mixed Taxonomy term ID.
 * Taxonomy term ID.
 */
function _get_tid_from_term_name($vocabulary, $term_name) {
  if ($term_name == OMDB_NONAME_PLACEHOLDER) {
    return NULL;
  }

  $terms = taxonomy_get_term_by_name($term_name, $vocabulary);

  if (empty($terms)) {
    // Create new term.
    $vobj = taxonomy_vocabulary_machine_name_load($vocabulary);
    $term = new stdClass();
    $term->name = $term_name;
    $term->vid = $vobj->vid;

    taxonomy_term_save($term);
  }
  // Fetch term ID if exists.
  else {
    $term = reset($terms);
  }

  return $term->tid;
}

/**
 * Helper function split string by delimiter.
 *
 * @param $string
 *  String for splitting.
 * @param string $delimiter
 *  Delimiter for splitting. Default value comma with space.
 *
 * @return array
 *  Array of values from $string splitted by $delimiter.
 */
function _get_array_from_string($string, $delimiter = ', ') {
  $array = [];

  if (!empty($string)) {
    $array = explode($delimiter, $string);
  }

  return $array;
}

/**
 * Returns array with count of translated movies and list of non-translated
 * terms.
 *
 * @param $vocabulary_name
 *  Taxonomy vocabulary name.
 *
 * @return array
 */
function _get_taxonomy_terms_translations_by_vocabulary_name($vocabulary_name) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
  $terms = entity_load('taxonomy_term', FALSE, ['vid' => $vocabulary->vid]);

  $non_translated = [];
  $translated_count = 0;
  foreach ($terms as $term) {
    if (t($term->name, [], ['language' => 'ru']) === $term->name) {
      $non_translated[] = $term->name;
    }
    else {
      $translated_count++;
    }
  }

  return [
    'translated_count' => $translated_count,
    'non_translated' => $non_translated,
  ];
}

/**
 * Search in google eng name of person and translate it to rus.
 *
 * @param $en_name
 *  Name of person on english.
 *
 * @return string
 *  Name of person on russian or empty string if not found.
 */
function _get_person_rus($en_name) {
  $co_director = FALSE;
  if (strpos($en_name, '(co-director)')) {
    $co_director = TRUE;
    $en_name = str_replace('(co-director)', '', $en_name);
  }

  $search_name = str_replace(' ', '+', $en_name);

  $ch = curl_init();
  $url = 'https://www.google.ru/search?q=' . $search_name . '&hl=ru';
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $response = curl_exec($ch);
  curl_close($ch);
  $response = iconv('windows-1251', 'UTF-8', $response);

  $found = preg_match('/<div class="FSP1Dd">(\D*)<\/div>/i', $response, $matches);

  if ($found) {
    return $co_director ? $matches[1] . ' (сорежиcсёр)' : $matches[1];
  }

  return '';
}
