<?php
/**
 * @file
 *
 * Module's main file.
 */

/**
 * Implements hook_block_info_alter().
 */
function cs_core_block_info_alter(&$blocks, $theme, $code_blocks) {
  switch ($theme) {
    case 'movies':
      $blocks['system']['help']['status'] = 0;
      $blocks['system']['navigation']['status'] = 0;
      $blocks['user']['login']['visibility'] = BLOCK_VISIBILITY_LISTED;
      $blocks['user']['login']['pages'] = 'user';
      $blocks['views']['-exp-cs_views_search-page']['status'] = 1;
      $blocks['views']['-exp-cs_views_search-page']['region'] = 'content';
      $blocks['views']['-exp-cs_views_search-page']['weight'] = -10;
      $blocks['views']['-exp-cs_views_search-page']['visibility'] = BLOCK_VISIBILITY_LISTED;
      $blocks['views']['-exp-cs_views_search-page']['pages'] = 'search';
      $blocks['system']['powered-by']['status'] = 0;
      $blocks['locale']['language']['status'] = 1;
      $blocks['locale']['language']['region'] = 'header';
      $blocks['locale']['language']['visibility'] = BLOCK_VISIBILITY_LISTED;
      $blocks['locale']['language']['pages'] = 'search';
      break;
  }
}

/**
 * Implements hook_user_view_alter().
 */
function cs_core_user_view_alter(&$build) {
  drupal_add_library('system', 'drupal.collapse');

  $en_films_count = db_select('node', 'n')
    ->fields('n', ['nid'])
    ->condition('n.language', 'en')
    ->execute()
    ->rowCount();
  $ru_films_count = db_select('node', 'n')
    ->fields('n', ['nid'])
    ->condition('n.language', 'ru')
    ->execute()
    ->rowCount();

  $build['stats'] = [
    '#type' => 'container',
  ];

  // Films.
  $build['stats']['films_info'] = [
    '#type' => 'fieldset',
    '#title' => t('Films info'),
  ];
  $build['stats']['films_info']['en'] = [
    '#type' => 'item',
    '#markup' => t('Films in english: @count', ['@count' => $en_films_count]),
  ];
  $build['stats']['films_info']['ru'] = [
    '#type' => 'item',
    '#markup' => t('Films in russian: @count', ['@count' => $ru_films_count]),
  ];
  $build['stats']['films_info']['diff'] = [
    '#type' => 'item',
    '#markup' => t('Need to translate: @count', ['@count' => $en_films_count - $ru_films_count]),
  ];


  // Display info about translations of vocabularies.
  $vocabularies = [
    'Genres',
    'Directors',
    'Actors',
  ];
  foreach ($vocabularies as $vocabulary_name) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $terms = entity_load('taxonomy_term', FALSE, ['vid' => $vocabulary->vid]);

    $non_translated = [];
    $translated = 0;
    foreach ($terms as $term) {
      if (t($term->name, [], ['language' => 'ru']) === $term->name) {
        $non_translated[] = $term->name;
      }
      else {
        $translated++;
      }
    }

    $en_count = count($terms);
    $non_translated_count = count($non_translated);

    $build['stats']["{$vocabulary_name}_info"] = [
      '#type' => 'fieldset',
      '#title' => t("{$vocabulary_name} info"),
    ];
    $build['stats']["{$vocabulary_name}_info"]['en'] = [
      '#type' => 'item',
      '#markup' => t("{$vocabulary_name} in english: @count", ['@count' => $en_count]),
    ];
    $build['stats']["{$vocabulary_name}_info"]['ru'] = [
      '#type' => 'item',
      '#markup' => t("{$vocabulary_name} in russian: @count", ['@count' => $translated]),
    ];
    $build['stats']["{$vocabulary_name}_info"]['diff'] = [
      '#type' => 'item',
      '#markup' => t('Need to translate: @count', ['@count' => $non_translated_count]),
    ];
    if ($non_translated_count) {
      $build['stats']["{$vocabulary_name}_info"]["non_translated_{$vocabulary_name}_wrapper"] = [
        '#type' => 'fieldset',
        '#title' => t("{$vocabulary_name} list for translate"),
        '#attributes' => [
          'class' => [
            'collapsible',
            'collapsed',
          ],
        ],
      ];
      // For copy to file.
      $build['stats']["{$vocabulary_name}_info"]["non_translated_{$vocabulary_name}_wrapper"]['for_file_wrapper'] = [
        '#type' => 'fieldset',
        '#title' => t('For copy to file'),
        '#attributes' => [
          'class' => [
            'collapsible',
            'collapsed',
          ],
        ],
      ];
      $prepared_for_copy = [];
      foreach ($non_translated as $value) {
        $prepared_for_copy[] = 'msgid "' . $value . '"<br>msgstr ""';
      }
      $build['stats']["{$vocabulary_name}_info"]["non_translated_{$vocabulary_name}_wrapper"]['for_file_wrapper']['for_file'] = [
        '#markup' => implode('<br>', $prepared_for_copy),
      ];
      // List separated by comma.
      $build['stats']["{$vocabulary_name}_info"]["non_translated_{$vocabulary_name}_wrapper"]['list_wrapper'] = [
        '#type' => 'fieldset',
        '#title' => t('List'),
        '#attributes' => [
          'class' => [
            'collapsible',
            'collapsed',
          ],
        ],
      ];
      $prepared_for_copy = [];
      foreach ($non_translated as $value) {
        $prepared_for_copy[] = "\"{$value}\"";
      }
      $build['stats']["{$vocabulary_name}_info"]["non_translated_{$vocabulary_name}_wrapper"]['list_wrapper']['list'] = [
        '#markup' => '[' . implode(',', $prepared_for_copy) . ']',
      ];
    }
  }


  $build['stats']['links'] = [
    '#type' => 'fieldset',
    '#title' => t('Links'),
  ];
  $build['stats']['links']['add_translations'] = [
    '#type' => 'link',
    '#href' => 'admin/settings/fetch-films',
    '#title' => 'Add translations',
  ];

  // Hide default user info.
  $build['summary']['#access'] = FALSE;
}

/**
 * Implements hook_mail_alter().
 */
function cs_core_mail_alter(&$message) {
  $message['send'] = FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function cs_core_menu_alter(&$items) {
  $items['user/password']['access callback'] = FALSE;
}
